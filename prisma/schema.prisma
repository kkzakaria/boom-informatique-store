// Boom Informatique Store - Prisma Schema
// E-commerce database schema for computer hardware and software store

generator client {
  provider = "prisma-client"
  output   = "../lib/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  cart      Cart?
  addresses Address[]

  @@map("users")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  type        AddressType
  street      String
  city        String
  state       String?
  postalCode  String
  country     String  @default("France")
  isDefault   Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Product management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  image       String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  slug        String     @unique
  sku         String     @unique
  price       Decimal    @db.Decimal(10, 2)
  comparePrice Decimal?  @db.Decimal(10, 2)
  costPrice   Decimal?   @db.Decimal(10, 2)
  stock       Int        @default(0)
  minStock    Int        @default(0)
  isActive    Boolean    @default(true)
  isFeatured  Boolean    @default(false)
  weight      Decimal?   @db.Decimal(8, 2)
  dimensions  String?
  brand       String?
  warranty    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String  // e.g., "Color", "Size", "Storage"
  value     String  // e.g., "Red", "Large", "256GB"
  sku       String?
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// Order management
model Order {
  id            String      @id @default(cuid())
  userId        String
  orderNumber   String      @unique @default(cuid())
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2) @default(0)
  shipping      Decimal     @db.Decimal(10, 2) @default(0)
  discount      Decimal     @db.Decimal(10, 2) @default(0)

  // Shipping address
  shippingStreet    String
  shippingCity      String
  shippingState     String?
  shippingPostalCode String
  shippingCountry   String  @default("France")

  // Billing address (optional, defaults to shipping)
  billingStreet     String?
  billingCity       String?
  billingState      String?
  billingPostalCode String?
  billingCountry    String?

  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Price at time of order
  total     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Shopping cart
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  MANAGER
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
