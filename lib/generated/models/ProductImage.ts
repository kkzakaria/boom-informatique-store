
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductImage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProductImage
 * 
 */
export type ProductImageModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductImagePayload>

export type AggregateProductImage = {
  _count: ProductImageCountAggregateOutputType | null
  _avg: ProductImageAvgAggregateOutputType | null
  _sum: ProductImageSumAggregateOutputType | null
  _min: ProductImageMinAggregateOutputType | null
  _max: ProductImageMaxAggregateOutputType | null
}

export type ProductImageAvgAggregateOutputType = {
  order: number | null
}

export type ProductImageSumAggregateOutputType = {
  order: number | null
}

export type ProductImageMinAggregateOutputType = {
  id: string | null
  productId: string | null
  url: string | null
  alt: string | null
  isPrimary: boolean | null
  order: number | null
}

export type ProductImageMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  url: string | null
  alt: string | null
  isPrimary: boolean | null
  order: number | null
}

export type ProductImageCountAggregateOutputType = {
  id: number
  productId: number
  url: number
  alt: number
  isPrimary: number
  order: number
  _all: number
}


export type ProductImageAvgAggregateInputType = {
  order?: true
}

export type ProductImageSumAggregateInputType = {
  order?: true
}

export type ProductImageMinAggregateInputType = {
  id?: true
  productId?: true
  url?: true
  alt?: true
  isPrimary?: true
  order?: true
}

export type ProductImageMaxAggregateInputType = {
  id?: true
  productId?: true
  url?: true
  alt?: true
  isPrimary?: true
  order?: true
}

export type ProductImageCountAggregateInputType = {
  id?: true
  productId?: true
  url?: true
  alt?: true
  isPrimary?: true
  order?: true
  _all?: true
}

export type ProductImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductImage to aggregate.
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductImages to fetch.
   */
  orderBy?: Prisma.ProductImageOrderByWithRelationInput | Prisma.ProductImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductImages
  **/
  _count?: true | ProductImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductImageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductImageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductImageMaxAggregateInputType
}

export type GetProductImageAggregateType<T extends ProductImageAggregateArgs> = {
      [P in keyof T & keyof AggregateProductImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductImage[P]>
    : Prisma.GetScalarType<T[P], AggregateProductImage[P]>
}




export type ProductImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductImageWhereInput
  orderBy?: Prisma.ProductImageOrderByWithAggregationInput | Prisma.ProductImageOrderByWithAggregationInput[]
  by: Prisma.ProductImageScalarFieldEnum[] | Prisma.ProductImageScalarFieldEnum
  having?: Prisma.ProductImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductImageCountAggregateInputType | true
  _avg?: ProductImageAvgAggregateInputType
  _sum?: ProductImageSumAggregateInputType
  _min?: ProductImageMinAggregateInputType
  _max?: ProductImageMaxAggregateInputType
}

export type ProductImageGroupByOutputType = {
  id: string
  productId: string
  url: string
  alt: string | null
  isPrimary: boolean
  order: number
  _count: ProductImageCountAggregateOutputType | null
  _avg: ProductImageAvgAggregateOutputType | null
  _sum: ProductImageSumAggregateOutputType | null
  _min: ProductImageMinAggregateOutputType | null
  _max: ProductImageMaxAggregateOutputType | null
}

type GetProductImageGroupByPayload<T extends ProductImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductImageGroupByOutputType[P]>
      }
    >
  >



export type ProductImageWhereInput = {
  AND?: Prisma.ProductImageWhereInput | Prisma.ProductImageWhereInput[]
  OR?: Prisma.ProductImageWhereInput[]
  NOT?: Prisma.ProductImageWhereInput | Prisma.ProductImageWhereInput[]
  id?: Prisma.StringFilter<"ProductImage"> | string
  productId?: Prisma.StringFilter<"ProductImage"> | string
  url?: Prisma.StringFilter<"ProductImage"> | string
  alt?: Prisma.StringNullableFilter<"ProductImage"> | string | null
  isPrimary?: Prisma.BoolFilter<"ProductImage"> | boolean
  order?: Prisma.IntFilter<"ProductImage"> | number
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type ProductImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  alt?: Prisma.SortOrderInput | Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  order?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
}

export type ProductImageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductImageWhereInput | Prisma.ProductImageWhereInput[]
  OR?: Prisma.ProductImageWhereInput[]
  NOT?: Prisma.ProductImageWhereInput | Prisma.ProductImageWhereInput[]
  productId?: Prisma.StringFilter<"ProductImage"> | string
  url?: Prisma.StringFilter<"ProductImage"> | string
  alt?: Prisma.StringNullableFilter<"ProductImage"> | string | null
  isPrimary?: Prisma.BoolFilter<"ProductImage"> | boolean
  order?: Prisma.IntFilter<"ProductImage"> | number
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type ProductImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  alt?: Prisma.SortOrderInput | Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  order?: Prisma.SortOrder
  _count?: Prisma.ProductImageCountOrderByAggregateInput
  _avg?: Prisma.ProductImageAvgOrderByAggregateInput
  _max?: Prisma.ProductImageMaxOrderByAggregateInput
  _min?: Prisma.ProductImageMinOrderByAggregateInput
  _sum?: Prisma.ProductImageSumOrderByAggregateInput
}

export type ProductImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductImageScalarWhereWithAggregatesInput | Prisma.ProductImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductImageScalarWhereWithAggregatesInput | Prisma.ProductImageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductImage"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductImage"> | string
  url?: Prisma.StringWithAggregatesFilter<"ProductImage"> | string
  alt?: Prisma.StringNullableWithAggregatesFilter<"ProductImage"> | string | null
  isPrimary?: Prisma.BoolWithAggregatesFilter<"ProductImage"> | boolean
  order?: Prisma.IntWithAggregatesFilter<"ProductImage"> | number
}

export type ProductImageCreateInput = {
  id?: string
  url: string
  alt?: string | null
  isPrimary?: boolean
  order?: number
  product: Prisma.ProductCreateNestedOneWithoutImagesInput
}

export type ProductImageUncheckedCreateInput = {
  id?: string
  productId: string
  url: string
  alt?: string | null
  isPrimary?: boolean
  order?: number
}

export type ProductImageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  product?: Prisma.ProductUpdateOneRequiredWithoutImagesNestedInput
}

export type ProductImageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductImageCreateManyInput = {
  id?: string
  productId: string
  url: string
  alt?: string | null
  isPrimary?: boolean
  order?: number
}

export type ProductImageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductImageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductImageListRelationFilter = {
  every?: Prisma.ProductImageWhereInput
  some?: Prisma.ProductImageWhereInput
  none?: Prisma.ProductImageWhereInput
}

export type ProductImageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  alt?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type ProductImageAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type ProductImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  alt?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type ProductImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  url?: Prisma.SortOrder
  alt?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type ProductImageSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type ProductImageCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductImageCreateWithoutProductInput, Prisma.ProductImageUncheckedCreateWithoutProductInput> | Prisma.ProductImageCreateWithoutProductInput[] | Prisma.ProductImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductImageCreateOrConnectWithoutProductInput | Prisma.ProductImageCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductImageCreateManyProductInputEnvelope
  connect?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
}

export type ProductImageUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductImageCreateWithoutProductInput, Prisma.ProductImageUncheckedCreateWithoutProductInput> | Prisma.ProductImageCreateWithoutProductInput[] | Prisma.ProductImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductImageCreateOrConnectWithoutProductInput | Prisma.ProductImageCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductImageCreateManyProductInputEnvelope
  connect?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
}

export type ProductImageUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductImageCreateWithoutProductInput, Prisma.ProductImageUncheckedCreateWithoutProductInput> | Prisma.ProductImageCreateWithoutProductInput[] | Prisma.ProductImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductImageCreateOrConnectWithoutProductInput | Prisma.ProductImageCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductImageUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductImageUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductImageCreateManyProductInputEnvelope
  set?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  disconnect?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  delete?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  connect?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  update?: Prisma.ProductImageUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductImageUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductImageUpdateManyWithWhereWithoutProductInput | Prisma.ProductImageUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductImageScalarWhereInput | Prisma.ProductImageScalarWhereInput[]
}

export type ProductImageUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductImageCreateWithoutProductInput, Prisma.ProductImageUncheckedCreateWithoutProductInput> | Prisma.ProductImageCreateWithoutProductInput[] | Prisma.ProductImageUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductImageCreateOrConnectWithoutProductInput | Prisma.ProductImageCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductImageUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductImageUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductImageCreateManyProductInputEnvelope
  set?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  disconnect?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  delete?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  connect?: Prisma.ProductImageWhereUniqueInput | Prisma.ProductImageWhereUniqueInput[]
  update?: Prisma.ProductImageUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductImageUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductImageUpdateManyWithWhereWithoutProductInput | Prisma.ProductImageUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductImageScalarWhereInput | Prisma.ProductImageScalarWhereInput[]
}

export type ProductImageCreateWithoutProductInput = {
  id?: string
  url: string
  alt?: string | null
  isPrimary?: boolean
  order?: number
}

export type ProductImageUncheckedCreateWithoutProductInput = {
  id?: string
  url: string
  alt?: string | null
  isPrimary?: boolean
  order?: number
}

export type ProductImageCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductImageWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductImageCreateWithoutProductInput, Prisma.ProductImageUncheckedCreateWithoutProductInput>
}

export type ProductImageCreateManyProductInputEnvelope = {
  data: Prisma.ProductImageCreateManyProductInput | Prisma.ProductImageCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductImageUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductImageWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductImageUpdateWithoutProductInput, Prisma.ProductImageUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductImageCreateWithoutProductInput, Prisma.ProductImageUncheckedCreateWithoutProductInput>
}

export type ProductImageUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductImageWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductImageUpdateWithoutProductInput, Prisma.ProductImageUncheckedUpdateWithoutProductInput>
}

export type ProductImageUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductImageScalarWhereInput
  data: Prisma.XOR<Prisma.ProductImageUpdateManyMutationInput, Prisma.ProductImageUncheckedUpdateManyWithoutProductInput>
}

export type ProductImageScalarWhereInput = {
  AND?: Prisma.ProductImageScalarWhereInput | Prisma.ProductImageScalarWhereInput[]
  OR?: Prisma.ProductImageScalarWhereInput[]
  NOT?: Prisma.ProductImageScalarWhereInput | Prisma.ProductImageScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductImage"> | string
  productId?: Prisma.StringFilter<"ProductImage"> | string
  url?: Prisma.StringFilter<"ProductImage"> | string
  alt?: Prisma.StringNullableFilter<"ProductImage"> | string | null
  isPrimary?: Prisma.BoolFilter<"ProductImage"> | boolean
  order?: Prisma.IntFilter<"ProductImage"> | number
}

export type ProductImageCreateManyProductInput = {
  id?: string
  url: string
  alt?: string | null
  isPrimary?: boolean
  order?: number
}

export type ProductImageUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductImageUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductImageUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  alt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
}



export type ProductImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  url?: boolean
  alt?: boolean
  isPrimary?: boolean
  order?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productImage"]>

export type ProductImageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  url?: boolean
  alt?: boolean
  isPrimary?: boolean
  order?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productImage"]>

export type ProductImageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  url?: boolean
  alt?: boolean
  isPrimary?: boolean
  order?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productImage"]>

export type ProductImageSelectScalar = {
  id?: boolean
  productId?: boolean
  url?: boolean
  alt?: boolean
  isPrimary?: boolean
  order?: boolean
}

export type ProductImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "url" | "alt" | "isPrimary" | "order", ExtArgs["result"]["productImage"]>
export type ProductImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductImageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductImageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductImage"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    url: string
    alt: string | null
    isPrimary: boolean
    order: number
  }, ExtArgs["result"]["productImage"]>
  composites: {}
}

export type ProductImageGetPayload<S extends boolean | null | undefined | ProductImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductImagePayload, S>

export type ProductImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductImageCountAggregateInputType | true
  }

export interface ProductImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductImage'], meta: { name: 'ProductImage' } }
  /**
   * Find zero or one ProductImage that matches the filter.
   * @param {ProductImageFindUniqueArgs} args - Arguments to find a ProductImage
   * @example
   * // Get one ProductImage
   * const productImage = await prisma.productImage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductImageFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductImage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductImageFindUniqueOrThrowArgs} args - Arguments to find a ProductImage
   * @example
   * // Get one ProductImage
   * const productImage = await prisma.productImage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductImage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageFindFirstArgs} args - Arguments to find a ProductImage
   * @example
   * // Get one ProductImage
   * const productImage = await prisma.productImage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductImageFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductImage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageFindFirstOrThrowArgs} args - Arguments to find a ProductImage
   * @example
   * // Get one ProductImage
   * const productImage = await prisma.productImage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductImages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductImages
   * const productImages = await prisma.productImage.findMany()
   * 
   * // Get first 10 ProductImages
   * const productImages = await prisma.productImage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productImageWithIdOnly = await prisma.productImage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductImageFindManyArgs>(args?: Prisma.SelectSubset<T, ProductImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductImage.
   * @param {ProductImageCreateArgs} args - Arguments to create a ProductImage.
   * @example
   * // Create one ProductImage
   * const ProductImage = await prisma.productImage.create({
   *   data: {
   *     // ... data to create a ProductImage
   *   }
   * })
   * 
   */
  create<T extends ProductImageCreateArgs>(args: Prisma.SelectSubset<T, ProductImageCreateArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductImages.
   * @param {ProductImageCreateManyArgs} args - Arguments to create many ProductImages.
   * @example
   * // Create many ProductImages
   * const productImage = await prisma.productImage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductImageCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductImages and returns the data saved in the database.
   * @param {ProductImageCreateManyAndReturnArgs} args - Arguments to create many ProductImages.
   * @example
   * // Create many ProductImages
   * const productImage = await prisma.productImage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductImages and only return the `id`
   * const productImageWithIdOnly = await prisma.productImage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductImageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductImage.
   * @param {ProductImageDeleteArgs} args - Arguments to delete one ProductImage.
   * @example
   * // Delete one ProductImage
   * const ProductImage = await prisma.productImage.delete({
   *   where: {
   *     // ... filter to delete one ProductImage
   *   }
   * })
   * 
   */
  delete<T extends ProductImageDeleteArgs>(args: Prisma.SelectSubset<T, ProductImageDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductImage.
   * @param {ProductImageUpdateArgs} args - Arguments to update one ProductImage.
   * @example
   * // Update one ProductImage
   * const productImage = await prisma.productImage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductImageUpdateArgs>(args: Prisma.SelectSubset<T, ProductImageUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductImages.
   * @param {ProductImageDeleteManyArgs} args - Arguments to filter ProductImages to delete.
   * @example
   * // Delete a few ProductImages
   * const { count } = await prisma.productImage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductImages
   * const productImage = await prisma.productImage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductImageUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductImages and returns the data updated in the database.
   * @param {ProductImageUpdateManyAndReturnArgs} args - Arguments to update many ProductImages.
   * @example
   * // Update many ProductImages
   * const productImage = await prisma.productImage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductImages and only return the `id`
   * const productImageWithIdOnly = await prisma.productImage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductImageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductImage.
   * @param {ProductImageUpsertArgs} args - Arguments to update or create a ProductImage.
   * @example
   * // Update or create a ProductImage
   * const productImage = await prisma.productImage.upsert({
   *   create: {
   *     // ... data to create a ProductImage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductImage we want to update
   *   }
   * })
   */
  upsert<T extends ProductImageUpsertArgs>(args: Prisma.SelectSubset<T, ProductImageUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductImageClient<runtime.Types.Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageCountArgs} args - Arguments to filter ProductImages to count.
   * @example
   * // Count the number of ProductImages
   * const count = await prisma.productImage.count({
   *   where: {
   *     // ... the filter for the ProductImages we want to count
   *   }
   * })
  **/
  count<T extends ProductImageCountArgs>(
    args?: Prisma.Subset<T, ProductImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductImageAggregateArgs>(args: Prisma.Subset<T, ProductImageAggregateArgs>): Prisma.PrismaPromise<GetProductImageAggregateType<T>>

  /**
   * Group by ProductImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductImageGroupByArgs['orderBy'] }
      : { orderBy?: ProductImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductImage model
 */
readonly fields: ProductImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductImage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductImage model
 */
export interface ProductImageFieldRefs {
  readonly id: Prisma.FieldRef<"ProductImage", 'String'>
  readonly productId: Prisma.FieldRef<"ProductImage", 'String'>
  readonly url: Prisma.FieldRef<"ProductImage", 'String'>
  readonly alt: Prisma.FieldRef<"ProductImage", 'String'>
  readonly isPrimary: Prisma.FieldRef<"ProductImage", 'Boolean'>
  readonly order: Prisma.FieldRef<"ProductImage", 'Int'>
}
    

// Custom InputTypes
/**
 * ProductImage findUnique
 */
export type ProductImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * Filter, which ProductImage to fetch.
   */
  where: Prisma.ProductImageWhereUniqueInput
}

/**
 * ProductImage findUniqueOrThrow
 */
export type ProductImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * Filter, which ProductImage to fetch.
   */
  where: Prisma.ProductImageWhereUniqueInput
}

/**
 * ProductImage findFirst
 */
export type ProductImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * Filter, which ProductImage to fetch.
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductImages to fetch.
   */
  orderBy?: Prisma.ProductImageOrderByWithRelationInput | Prisma.ProductImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductImages.
   */
  cursor?: Prisma.ProductImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductImages.
   */
  distinct?: Prisma.ProductImageScalarFieldEnum | Prisma.ProductImageScalarFieldEnum[]
}

/**
 * ProductImage findFirstOrThrow
 */
export type ProductImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * Filter, which ProductImage to fetch.
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductImages to fetch.
   */
  orderBy?: Prisma.ProductImageOrderByWithRelationInput | Prisma.ProductImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductImages.
   */
  cursor?: Prisma.ProductImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductImages.
   */
  distinct?: Prisma.ProductImageScalarFieldEnum | Prisma.ProductImageScalarFieldEnum[]
}

/**
 * ProductImage findMany
 */
export type ProductImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * Filter, which ProductImages to fetch.
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductImages to fetch.
   */
  orderBy?: Prisma.ProductImageOrderByWithRelationInput | Prisma.ProductImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductImages.
   */
  cursor?: Prisma.ProductImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductImages.
   */
  skip?: number
  distinct?: Prisma.ProductImageScalarFieldEnum | Prisma.ProductImageScalarFieldEnum[]
}

/**
 * ProductImage create
 */
export type ProductImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductImage.
   */
  data: Prisma.XOR<Prisma.ProductImageCreateInput, Prisma.ProductImageUncheckedCreateInput>
}

/**
 * ProductImage createMany
 */
export type ProductImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductImages.
   */
  data: Prisma.ProductImageCreateManyInput | Prisma.ProductImageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductImage createManyAndReturn
 */
export type ProductImageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * The data used to create many ProductImages.
   */
  data: Prisma.ProductImageCreateManyInput | Prisma.ProductImageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductImage update
 */
export type ProductImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductImage.
   */
  data: Prisma.XOR<Prisma.ProductImageUpdateInput, Prisma.ProductImageUncheckedUpdateInput>
  /**
   * Choose, which ProductImage to update.
   */
  where: Prisma.ProductImageWhereUniqueInput
}

/**
 * ProductImage updateMany
 */
export type ProductImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductImages.
   */
  data: Prisma.XOR<Prisma.ProductImageUpdateManyMutationInput, Prisma.ProductImageUncheckedUpdateManyInput>
  /**
   * Filter which ProductImages to update
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * Limit how many ProductImages to update.
   */
  limit?: number
}

/**
 * ProductImage updateManyAndReturn
 */
export type ProductImageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * The data used to update ProductImages.
   */
  data: Prisma.XOR<Prisma.ProductImageUpdateManyMutationInput, Prisma.ProductImageUncheckedUpdateManyInput>
  /**
   * Filter which ProductImages to update
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * Limit how many ProductImages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductImage upsert
 */
export type ProductImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductImage to update in case it exists.
   */
  where: Prisma.ProductImageWhereUniqueInput
  /**
   * In case the ProductImage found by the `where` argument doesn't exist, create a new ProductImage with this data.
   */
  create: Prisma.XOR<Prisma.ProductImageCreateInput, Prisma.ProductImageUncheckedCreateInput>
  /**
   * In case the ProductImage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductImageUpdateInput, Prisma.ProductImageUncheckedUpdateInput>
}

/**
 * ProductImage delete
 */
export type ProductImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
  /**
   * Filter which ProductImage to delete.
   */
  where: Prisma.ProductImageWhereUniqueInput
}

/**
 * ProductImage deleteMany
 */
export type ProductImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductImages to delete
   */
  where?: Prisma.ProductImageWhereInput
  /**
   * Limit how many ProductImages to delete.
   */
  limit?: number
}

/**
 * ProductImage without action
 */
export type ProductImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductImage
   */
  select?: Prisma.ProductImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductImage
   */
  omit?: Prisma.ProductImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductImageInclude<ExtArgs> | null
}
