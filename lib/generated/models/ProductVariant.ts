
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductVariant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProductVariant
 * 
 */
export type ProductVariantModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductVariantPayload>

export type AggregateProductVariant = {
  _count: ProductVariantCountAggregateOutputType | null
  _avg: ProductVariantAvgAggregateOutputType | null
  _sum: ProductVariantSumAggregateOutputType | null
  _min: ProductVariantMinAggregateOutputType | null
  _max: ProductVariantMaxAggregateOutputType | null
}

export type ProductVariantAvgAggregateOutputType = {
  price: runtime.Decimal | null
  stock: number | null
}

export type ProductVariantSumAggregateOutputType = {
  price: runtime.Decimal | null
  stock: number | null
}

export type ProductVariantMinAggregateOutputType = {
  id: string | null
  productId: string | null
  name: string | null
  value: string | null
  sku: string | null
  price: runtime.Decimal | null
  stock: number | null
}

export type ProductVariantMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  name: string | null
  value: string | null
  sku: string | null
  price: runtime.Decimal | null
  stock: number | null
}

export type ProductVariantCountAggregateOutputType = {
  id: number
  productId: number
  name: number
  value: number
  sku: number
  price: number
  stock: number
  _all: number
}


export type ProductVariantAvgAggregateInputType = {
  price?: true
  stock?: true
}

export type ProductVariantSumAggregateInputType = {
  price?: true
  stock?: true
}

export type ProductVariantMinAggregateInputType = {
  id?: true
  productId?: true
  name?: true
  value?: true
  sku?: true
  price?: true
  stock?: true
}

export type ProductVariantMaxAggregateInputType = {
  id?: true
  productId?: true
  name?: true
  value?: true
  sku?: true
  price?: true
  stock?: true
}

export type ProductVariantCountAggregateInputType = {
  id?: true
  productId?: true
  name?: true
  value?: true
  sku?: true
  price?: true
  stock?: true
  _all?: true
}

export type ProductVariantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductVariant to aggregate.
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductVariants to fetch.
   */
  orderBy?: Prisma.ProductVariantOrderByWithRelationInput | Prisma.ProductVariantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductVariantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductVariants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductVariants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductVariants
  **/
  _count?: true | ProductVariantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductVariantAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductVariantSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductVariantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductVariantMaxAggregateInputType
}

export type GetProductVariantAggregateType<T extends ProductVariantAggregateArgs> = {
      [P in keyof T & keyof AggregateProductVariant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductVariant[P]>
    : Prisma.GetScalarType<T[P], AggregateProductVariant[P]>
}




export type ProductVariantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductVariantWhereInput
  orderBy?: Prisma.ProductVariantOrderByWithAggregationInput | Prisma.ProductVariantOrderByWithAggregationInput[]
  by: Prisma.ProductVariantScalarFieldEnum[] | Prisma.ProductVariantScalarFieldEnum
  having?: Prisma.ProductVariantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductVariantCountAggregateInputType | true
  _avg?: ProductVariantAvgAggregateInputType
  _sum?: ProductVariantSumAggregateInputType
  _min?: ProductVariantMinAggregateInputType
  _max?: ProductVariantMaxAggregateInputType
}

export type ProductVariantGroupByOutputType = {
  id: string
  productId: string
  name: string
  value: string
  sku: string | null
  price: runtime.Decimal | null
  stock: number
  _count: ProductVariantCountAggregateOutputType | null
  _avg: ProductVariantAvgAggregateOutputType | null
  _sum: ProductVariantSumAggregateOutputType | null
  _min: ProductVariantMinAggregateOutputType | null
  _max: ProductVariantMaxAggregateOutputType | null
}

type GetProductVariantGroupByPayload<T extends ProductVariantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductVariantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductVariantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
      }
    >
  >



export type ProductVariantWhereInput = {
  AND?: Prisma.ProductVariantWhereInput | Prisma.ProductVariantWhereInput[]
  OR?: Prisma.ProductVariantWhereInput[]
  NOT?: Prisma.ProductVariantWhereInput | Prisma.ProductVariantWhereInput[]
  id?: Prisma.StringFilter<"ProductVariant"> | string
  productId?: Prisma.StringFilter<"ProductVariant"> | string
  name?: Prisma.StringFilter<"ProductVariant"> | string
  value?: Prisma.StringFilter<"ProductVariant"> | string
  sku?: Prisma.StringNullableFilter<"ProductVariant"> | string | null
  price?: Prisma.DecimalNullableFilter<"ProductVariant"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFilter<"ProductVariant"> | number
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type ProductVariantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  sku?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  stock?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
}

export type ProductVariantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductVariantWhereInput | Prisma.ProductVariantWhereInput[]
  OR?: Prisma.ProductVariantWhereInput[]
  NOT?: Prisma.ProductVariantWhereInput | Prisma.ProductVariantWhereInput[]
  productId?: Prisma.StringFilter<"ProductVariant"> | string
  name?: Prisma.StringFilter<"ProductVariant"> | string
  value?: Prisma.StringFilter<"ProductVariant"> | string
  sku?: Prisma.StringNullableFilter<"ProductVariant"> | string | null
  price?: Prisma.DecimalNullableFilter<"ProductVariant"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFilter<"ProductVariant"> | number
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type ProductVariantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  sku?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrderInput | Prisma.SortOrder
  stock?: Prisma.SortOrder
  _count?: Prisma.ProductVariantCountOrderByAggregateInput
  _avg?: Prisma.ProductVariantAvgOrderByAggregateInput
  _max?: Prisma.ProductVariantMaxOrderByAggregateInput
  _min?: Prisma.ProductVariantMinOrderByAggregateInput
  _sum?: Prisma.ProductVariantSumOrderByAggregateInput
}

export type ProductVariantScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductVariantScalarWhereWithAggregatesInput | Prisma.ProductVariantScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductVariantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductVariantScalarWhereWithAggregatesInput | Prisma.ProductVariantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductVariant"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductVariant"> | string
  name?: Prisma.StringWithAggregatesFilter<"ProductVariant"> | string
  value?: Prisma.StringWithAggregatesFilter<"ProductVariant"> | string
  sku?: Prisma.StringNullableWithAggregatesFilter<"ProductVariant"> | string | null
  price?: Prisma.DecimalNullableWithAggregatesFilter<"ProductVariant"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntWithAggregatesFilter<"ProductVariant"> | number
}

export type ProductVariantCreateInput = {
  id?: string
  name: string
  value: string
  sku?: string | null
  price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: number
  product: Prisma.ProductCreateNestedOneWithoutVariantsInput
}

export type ProductVariantUncheckedCreateInput = {
  id?: string
  productId: string
  name: string
  value: string
  sku?: string | null
  price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: number
}

export type ProductVariantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  product?: Prisma.ProductUpdateOneRequiredWithoutVariantsNestedInput
}

export type ProductVariantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductVariantCreateManyInput = {
  id?: string
  productId: string
  name: string
  value: string
  sku?: string | null
  price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: number
}

export type ProductVariantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductVariantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductVariantListRelationFilter = {
  every?: Prisma.ProductVariantWhereInput
  some?: Prisma.ProductVariantWhereInput
  none?: Prisma.ProductVariantWhereInput
}

export type ProductVariantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductVariantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  price?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type ProductVariantAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type ProductVariantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  price?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type ProductVariantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  price?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type ProductVariantSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  stock?: Prisma.SortOrder
}

export type ProductVariantCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductVariantCreateWithoutProductInput, Prisma.ProductVariantUncheckedCreateWithoutProductInput> | Prisma.ProductVariantCreateWithoutProductInput[] | Prisma.ProductVariantUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductVariantCreateOrConnectWithoutProductInput | Prisma.ProductVariantCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductVariantCreateManyProductInputEnvelope
  connect?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
}

export type ProductVariantUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductVariantCreateWithoutProductInput, Prisma.ProductVariantUncheckedCreateWithoutProductInput> | Prisma.ProductVariantCreateWithoutProductInput[] | Prisma.ProductVariantUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductVariantCreateOrConnectWithoutProductInput | Prisma.ProductVariantCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductVariantCreateManyProductInputEnvelope
  connect?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
}

export type ProductVariantUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductVariantCreateWithoutProductInput, Prisma.ProductVariantUncheckedCreateWithoutProductInput> | Prisma.ProductVariantCreateWithoutProductInput[] | Prisma.ProductVariantUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductVariantCreateOrConnectWithoutProductInput | Prisma.ProductVariantCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductVariantUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductVariantCreateManyProductInputEnvelope
  set?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  disconnect?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  delete?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  connect?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  update?: Prisma.ProductVariantUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductVariantUpdateManyWithWhereWithoutProductInput | Prisma.ProductVariantUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductVariantScalarWhereInput | Prisma.ProductVariantScalarWhereInput[]
}

export type ProductVariantUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductVariantCreateWithoutProductInput, Prisma.ProductVariantUncheckedCreateWithoutProductInput> | Prisma.ProductVariantCreateWithoutProductInput[] | Prisma.ProductVariantUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductVariantCreateOrConnectWithoutProductInput | Prisma.ProductVariantCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductVariantUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductVariantCreateManyProductInputEnvelope
  set?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  disconnect?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  delete?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  connect?: Prisma.ProductVariantWhereUniqueInput | Prisma.ProductVariantWhereUniqueInput[]
  update?: Prisma.ProductVariantUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductVariantUpdateManyWithWhereWithoutProductInput | Prisma.ProductVariantUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductVariantScalarWhereInput | Prisma.ProductVariantScalarWhereInput[]
}

export type ProductVariantCreateWithoutProductInput = {
  id?: string
  name: string
  value: string
  sku?: string | null
  price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: number
}

export type ProductVariantUncheckedCreateWithoutProductInput = {
  id?: string
  name: string
  value: string
  sku?: string | null
  price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: number
}

export type ProductVariantCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductVariantWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductVariantCreateWithoutProductInput, Prisma.ProductVariantUncheckedCreateWithoutProductInput>
}

export type ProductVariantCreateManyProductInputEnvelope = {
  data: Prisma.ProductVariantCreateManyProductInput | Prisma.ProductVariantCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductVariantUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductVariantWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductVariantUpdateWithoutProductInput, Prisma.ProductVariantUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductVariantCreateWithoutProductInput, Prisma.ProductVariantUncheckedCreateWithoutProductInput>
}

export type ProductVariantUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductVariantWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductVariantUpdateWithoutProductInput, Prisma.ProductVariantUncheckedUpdateWithoutProductInput>
}

export type ProductVariantUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductVariantScalarWhereInput
  data: Prisma.XOR<Prisma.ProductVariantUpdateManyMutationInput, Prisma.ProductVariantUncheckedUpdateManyWithoutProductInput>
}

export type ProductVariantScalarWhereInput = {
  AND?: Prisma.ProductVariantScalarWhereInput | Prisma.ProductVariantScalarWhereInput[]
  OR?: Prisma.ProductVariantScalarWhereInput[]
  NOT?: Prisma.ProductVariantScalarWhereInput | Prisma.ProductVariantScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductVariant"> | string
  productId?: Prisma.StringFilter<"ProductVariant"> | string
  name?: Prisma.StringFilter<"ProductVariant"> | string
  value?: Prisma.StringFilter<"ProductVariant"> | string
  sku?: Prisma.StringNullableFilter<"ProductVariant"> | string | null
  price?: Prisma.DecimalNullableFilter<"ProductVariant"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFilter<"ProductVariant"> | number
}

export type ProductVariantCreateManyProductInput = {
  id?: string
  name: string
  value: string
  sku?: string | null
  price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: number
}

export type ProductVariantUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductVariantUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductVariantUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}



export type ProductVariantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  name?: boolean
  value?: boolean
  sku?: boolean
  price?: boolean
  stock?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productVariant"]>

export type ProductVariantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  name?: boolean
  value?: boolean
  sku?: boolean
  price?: boolean
  stock?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productVariant"]>

export type ProductVariantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  name?: boolean
  value?: boolean
  sku?: boolean
  price?: boolean
  stock?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productVariant"]>

export type ProductVariantSelectScalar = {
  id?: boolean
  productId?: boolean
  name?: boolean
  value?: boolean
  sku?: boolean
  price?: boolean
  stock?: boolean
}

export type ProductVariantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "name" | "value" | "sku" | "price" | "stock", ExtArgs["result"]["productVariant"]>
export type ProductVariantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductVariantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductVariantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductVariantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductVariant"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    name: string
    value: string
    sku: string | null
    price: runtime.Decimal | null
    stock: number
  }, ExtArgs["result"]["productVariant"]>
  composites: {}
}

export type ProductVariantGetPayload<S extends boolean | null | undefined | ProductVariantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload, S>

export type ProductVariantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductVariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductVariantCountAggregateInputType | true
  }

export interface ProductVariantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductVariant'], meta: { name: 'ProductVariant' } }
  /**
   * Find zero or one ProductVariant that matches the filter.
   * @param {ProductVariantFindUniqueArgs} args - Arguments to find a ProductVariant
   * @example
   * // Get one ProductVariant
   * const productVariant = await prisma.productVariant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductVariantFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductVariantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductVariant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductVariantFindUniqueOrThrowArgs} args - Arguments to find a ProductVariant
   * @example
   * // Get one ProductVariant
   * const productVariant = await prisma.productVariant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductVariantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductVariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductVariant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantFindFirstArgs} args - Arguments to find a ProductVariant
   * @example
   * // Get one ProductVariant
   * const productVariant = await prisma.productVariant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductVariantFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductVariantFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductVariant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantFindFirstOrThrowArgs} args - Arguments to find a ProductVariant
   * @example
   * // Get one ProductVariant
   * const productVariant = await prisma.productVariant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductVariantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductVariantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductVariants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductVariants
   * const productVariants = await prisma.productVariant.findMany()
   * 
   * // Get first 10 ProductVariants
   * const productVariants = await prisma.productVariant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productVariantWithIdOnly = await prisma.productVariant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductVariantFindManyArgs>(args?: Prisma.SelectSubset<T, ProductVariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductVariant.
   * @param {ProductVariantCreateArgs} args - Arguments to create a ProductVariant.
   * @example
   * // Create one ProductVariant
   * const ProductVariant = await prisma.productVariant.create({
   *   data: {
   *     // ... data to create a ProductVariant
   *   }
   * })
   * 
   */
  create<T extends ProductVariantCreateArgs>(args: Prisma.SelectSubset<T, ProductVariantCreateArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductVariants.
   * @param {ProductVariantCreateManyArgs} args - Arguments to create many ProductVariants.
   * @example
   * // Create many ProductVariants
   * const productVariant = await prisma.productVariant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductVariantCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductVariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductVariants and returns the data saved in the database.
   * @param {ProductVariantCreateManyAndReturnArgs} args - Arguments to create many ProductVariants.
   * @example
   * // Create many ProductVariants
   * const productVariant = await prisma.productVariant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductVariants and only return the `id`
   * const productVariantWithIdOnly = await prisma.productVariant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductVariantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductVariantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductVariant.
   * @param {ProductVariantDeleteArgs} args - Arguments to delete one ProductVariant.
   * @example
   * // Delete one ProductVariant
   * const ProductVariant = await prisma.productVariant.delete({
   *   where: {
   *     // ... filter to delete one ProductVariant
   *   }
   * })
   * 
   */
  delete<T extends ProductVariantDeleteArgs>(args: Prisma.SelectSubset<T, ProductVariantDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductVariant.
   * @param {ProductVariantUpdateArgs} args - Arguments to update one ProductVariant.
   * @example
   * // Update one ProductVariant
   * const productVariant = await prisma.productVariant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductVariantUpdateArgs>(args: Prisma.SelectSubset<T, ProductVariantUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductVariants.
   * @param {ProductVariantDeleteManyArgs} args - Arguments to filter ProductVariants to delete.
   * @example
   * // Delete a few ProductVariants
   * const { count } = await prisma.productVariant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductVariantDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductVariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductVariants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductVariants
   * const productVariant = await prisma.productVariant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductVariantUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductVariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductVariants and returns the data updated in the database.
   * @param {ProductVariantUpdateManyAndReturnArgs} args - Arguments to update many ProductVariants.
   * @example
   * // Update many ProductVariants
   * const productVariant = await prisma.productVariant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductVariants and only return the `id`
   * const productVariantWithIdOnly = await prisma.productVariant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductVariantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductVariantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductVariant.
   * @param {ProductVariantUpsertArgs} args - Arguments to update or create a ProductVariant.
   * @example
   * // Update or create a ProductVariant
   * const productVariant = await prisma.productVariant.upsert({
   *   create: {
   *     // ... data to create a ProductVariant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductVariant we want to update
   *   }
   * })
   */
  upsert<T extends ProductVariantUpsertArgs>(args: Prisma.SelectSubset<T, ProductVariantUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductVariantClient<runtime.Types.Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductVariants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantCountArgs} args - Arguments to filter ProductVariants to count.
   * @example
   * // Count the number of ProductVariants
   * const count = await prisma.productVariant.count({
   *   where: {
   *     // ... the filter for the ProductVariants we want to count
   *   }
   * })
  **/
  count<T extends ProductVariantCountArgs>(
    args?: Prisma.Subset<T, ProductVariantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductVariantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductVariant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductVariantAggregateArgs>(args: Prisma.Subset<T, ProductVariantAggregateArgs>): Prisma.PrismaPromise<GetProductVariantAggregateType<T>>

  /**
   * Group by ProductVariant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductVariantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductVariantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductVariantGroupByArgs['orderBy'] }
      : { orderBy?: ProductVariantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductVariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductVariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductVariant model
 */
readonly fields: ProductVariantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductVariant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductVariantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductVariant model
 */
export interface ProductVariantFieldRefs {
  readonly id: Prisma.FieldRef<"ProductVariant", 'String'>
  readonly productId: Prisma.FieldRef<"ProductVariant", 'String'>
  readonly name: Prisma.FieldRef<"ProductVariant", 'String'>
  readonly value: Prisma.FieldRef<"ProductVariant", 'String'>
  readonly sku: Prisma.FieldRef<"ProductVariant", 'String'>
  readonly price: Prisma.FieldRef<"ProductVariant", 'Decimal'>
  readonly stock: Prisma.FieldRef<"ProductVariant", 'Int'>
}
    

// Custom InputTypes
/**
 * ProductVariant findUnique
 */
export type ProductVariantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * Filter, which ProductVariant to fetch.
   */
  where: Prisma.ProductVariantWhereUniqueInput
}

/**
 * ProductVariant findUniqueOrThrow
 */
export type ProductVariantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * Filter, which ProductVariant to fetch.
   */
  where: Prisma.ProductVariantWhereUniqueInput
}

/**
 * ProductVariant findFirst
 */
export type ProductVariantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * Filter, which ProductVariant to fetch.
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductVariants to fetch.
   */
  orderBy?: Prisma.ProductVariantOrderByWithRelationInput | Prisma.ProductVariantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductVariants.
   */
  cursor?: Prisma.ProductVariantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductVariants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductVariants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductVariants.
   */
  distinct?: Prisma.ProductVariantScalarFieldEnum | Prisma.ProductVariantScalarFieldEnum[]
}

/**
 * ProductVariant findFirstOrThrow
 */
export type ProductVariantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * Filter, which ProductVariant to fetch.
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductVariants to fetch.
   */
  orderBy?: Prisma.ProductVariantOrderByWithRelationInput | Prisma.ProductVariantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductVariants.
   */
  cursor?: Prisma.ProductVariantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductVariants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductVariants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductVariants.
   */
  distinct?: Prisma.ProductVariantScalarFieldEnum | Prisma.ProductVariantScalarFieldEnum[]
}

/**
 * ProductVariant findMany
 */
export type ProductVariantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * Filter, which ProductVariants to fetch.
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductVariants to fetch.
   */
  orderBy?: Prisma.ProductVariantOrderByWithRelationInput | Prisma.ProductVariantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductVariants.
   */
  cursor?: Prisma.ProductVariantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductVariants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductVariants.
   */
  skip?: number
  distinct?: Prisma.ProductVariantScalarFieldEnum | Prisma.ProductVariantScalarFieldEnum[]
}

/**
 * ProductVariant create
 */
export type ProductVariantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductVariant.
   */
  data: Prisma.XOR<Prisma.ProductVariantCreateInput, Prisma.ProductVariantUncheckedCreateInput>
}

/**
 * ProductVariant createMany
 */
export type ProductVariantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductVariants.
   */
  data: Prisma.ProductVariantCreateManyInput | Prisma.ProductVariantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductVariant createManyAndReturn
 */
export type ProductVariantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * The data used to create many ProductVariants.
   */
  data: Prisma.ProductVariantCreateManyInput | Prisma.ProductVariantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductVariant update
 */
export type ProductVariantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductVariant.
   */
  data: Prisma.XOR<Prisma.ProductVariantUpdateInput, Prisma.ProductVariantUncheckedUpdateInput>
  /**
   * Choose, which ProductVariant to update.
   */
  where: Prisma.ProductVariantWhereUniqueInput
}

/**
 * ProductVariant updateMany
 */
export type ProductVariantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductVariants.
   */
  data: Prisma.XOR<Prisma.ProductVariantUpdateManyMutationInput, Prisma.ProductVariantUncheckedUpdateManyInput>
  /**
   * Filter which ProductVariants to update
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * Limit how many ProductVariants to update.
   */
  limit?: number
}

/**
 * ProductVariant updateManyAndReturn
 */
export type ProductVariantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * The data used to update ProductVariants.
   */
  data: Prisma.XOR<Prisma.ProductVariantUpdateManyMutationInput, Prisma.ProductVariantUncheckedUpdateManyInput>
  /**
   * Filter which ProductVariants to update
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * Limit how many ProductVariants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductVariant upsert
 */
export type ProductVariantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductVariant to update in case it exists.
   */
  where: Prisma.ProductVariantWhereUniqueInput
  /**
   * In case the ProductVariant found by the `where` argument doesn't exist, create a new ProductVariant with this data.
   */
  create: Prisma.XOR<Prisma.ProductVariantCreateInput, Prisma.ProductVariantUncheckedCreateInput>
  /**
   * In case the ProductVariant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductVariantUpdateInput, Prisma.ProductVariantUncheckedUpdateInput>
}

/**
 * ProductVariant delete
 */
export type ProductVariantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
  /**
   * Filter which ProductVariant to delete.
   */
  where: Prisma.ProductVariantWhereUniqueInput
}

/**
 * ProductVariant deleteMany
 */
export type ProductVariantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductVariants to delete
   */
  where?: Prisma.ProductVariantWhereInput
  /**
   * Limit how many ProductVariants to delete.
   */
  limit?: number
}

/**
 * ProductVariant without action
 */
export type ProductVariantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductVariant
   */
  select?: Prisma.ProductVariantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductVariant
   */
  omit?: Prisma.ProductVariantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductVariantInclude<ExtArgs> | null
}
